/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");
const path = require("path");
const cors = require("cors");
const app = express();

app.use(bodyParser.json());
app.use(cors());

const filePath = path.join(__dirname, "./todos.json");

app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) throw err;
    const content = JSON.parse(data);
    let idx = -1;
    for (let i = 0; i < content.length; i++) {
      if (content[i].id === id) {
        idx = i;
        break;
      }
    }
    if (idx != -1) {
      console.log(content[idx]);
      content.splice(idx, 1);
      fs.writeFile(filePath, JSON.stringify(content), (err) => {
        if (err) throw err;
        res.send(content);
      })
    } else {
      res.status(400).send("Id is wrong");
    }
  })
});

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const { title, description } = req.body;
  fs.readFile(filePath, "utf8", (err, content) => {
    if (err) throw err;
    let data = JSON.parse(content);
    for (let i = 0; i < data.length; i++) {
      if (data[i].id === id) {
        data[i] = {
          id: id,
          title: title,
          description: description
        }
      }
    }
    fs.writeFile(filePath, JSON.stringify(data), (err) => {
      if (err) throw err;
      res.status(200).send(data);
    });
  });
});
app.get("/todos", (req, res) => {
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) res.send(err);
    const todo = JSON.parse(data);
    res.json(todo);
  });
});

app.get("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  fs.readFile(filePath, "utf8", (err, d) => {
    if (err) throw err;
    let temp = null;
    const data = JSON.parse(d);
    for (let i = 0; i < data.length; i++) {
      if (data[i].id === id) {
        temp = data[i];
        break;
      }
    }
    // console.log(typeof (id));
    // console.log(temp);
    if (temp) {
      res.status(200).json(temp);
    } else {
      res.status(400).send("Id not found");
    }
  });
});

app.post("/todos", (req, res) => {
  let { title, description } = req.body;
  if (!title || !description) {
    res.status(404).send("Please enter all field");
    return;
  }
  title = title.toUpperCase();
  const newTodo = {
    id: Math.round(Math.random() * 100000),
    title: title,
    description: description
  }
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) throw err;
    const allToDo = JSON.parse(data);
    allToDo.push(newTodo);
    fs.writeFile(filePath, JSON.stringify(allToDo), (err) => {
      if (err)
        throw err;
      res.status(201).json("hi");
    });
  });
});
app.listen(3000, () => console.log("Earth is Eliptical shape"));
module.exports = app;
